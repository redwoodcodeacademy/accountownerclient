{"version":3,"sources":["store/actions/errorHandlerActions.js","axios/axios.js","store/actions/repositoryActions.js","components/Modals/SuccessModal/SuccessModal.js","components/Modals/ErrorModal/ErrorModal.js","UI/Inputs/Input.js","Utility/InputConfiguration.js","Utility/FormUtility.js","containers/Owner/UpdateOwner/UpdateOwner.js"],"names":["closeErrorModal","type","actionTypes","handleHTTPError","error","props","response","status","execute404Handler","execute500Handler","executeOtherErrorHandler","instance","axios","create","baseURL","headers","headerType","getData","url","dispatch","get","then","data","catch","errorHandlerActions","postData","obj","post","postDataSuccess","putData","put","putDataSuccess","deleteData","delete","deleteDataSuccess","closeSuccessModal","SuccessModal","show","backdrop","Header","modalHeaderText","Body","modalBodyText","Footer","bsStyle","onClick","successClick","okButtonText","ErrorModal","closeModal","input","inputField","errorMessage","invalid","shouldValidate","touched","elementType","controlId","id","componentClass","ControlLabel","sm","label","value","onChange","changed","onBlur","blur","selected","dateFormat","readOnly","className","showYearDropdown","dropdownMode","returnInputConfiguration","name","element","validation","required","maxLength","valid","address","dateOfBirth","moment","convertStateToArrayOfFormObjects","formObject","formElementsArray","key","push","config","executeValidationAndReturnFormElement","event","updatedOwnerForm","formElement","target","validationResponse","validationObject","isValid","trim","length","checkValidity","countInvalidElements","ownerForm","UpdateOwner","state","isFormValid","componentWillMount","setState","componentDidMount","match","params","onGetOwnerById","componentWillReceiveProps","nextProps","nameObject","dateObject","addressObject","handleChangeEvent","formUtilityActions","counter","redirectToOwnerList","history","updateOwner","preventDefault","ownerToUpdate","onUpdateOwner","this","horizontal","onSubmit","map","mdOffset","md","disabled","showSuccessModal","onCloseSuccessModal","showErrorModal","onCloseErrorModal","Component","connect","repository","errorHandler","repositoryActions","owner"],"mappings":"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","file":"static/js/7.8e01a707.chunk.js","sourcesContent":["import * as actionTypes from './actionTypes';\r\n\r\nconst execute404Handler = (props) => {\r\n    return {\r\n        type: actionTypes.HTTP_404_ERROR,\r\n        props: props\r\n    }\r\n}\r\n\r\nconst execute500Handler = (props) => {\r\n    return {\r\n        type: actionTypes.HTTP_500_ERROR,\r\n        props: props\r\n    }\r\n}\r\n\r\nconst executeOtherErrorHandler = (error) => {\r\n    return {\r\n        type: actionTypes.HTTP_OTHER_ERROR,\r\n        error: error\r\n    }\r\n}\r\n\r\nexport const closeErrorModal = () => {\r\n    return {\r\n        type: actionTypes.CLOSE_ERROR_MODAL\r\n    }\r\n}\r\n\r\nexport const handleHTTPError = (error, props) => {\r\n    if (error.response.status === 404) {\r\n        return execute404Handler(props);\r\n    }\r\n    else if (error.response.status === 500) {\r\n        return execute500Handler(props);\r\n    }\r\n    else {\r\n        return executeOtherErrorHandler(error);\r\n    }\r\n}","import axios from 'axios';\r\n\r\nconst instance = axios.create({\r\n    // baseURL: 'http://localhost:5000',\r\n    baseURL: 'https://brokerage.herokuapp.com',\r\n    headers: {\r\n        headerType: 'example header type'\r\n    }\r\n});\r\n\r\nexport default instance;","import * as actionTypes from './actionTypes';\r\nimport axios from '../../axios/axios';\r\nimport * as errorHandlerActions from './errorHandlerActions';\r\n\r\nconst getDataSuccess = (data) => {\r\n    return {\r\n        type: actionTypes.GET_DATA_SUCCESS,\r\n        data: data\r\n    }\r\n}\r\n\r\nexport const getData = (url, props) => {\r\n    return (dispatch) => {\r\n        axios.get(url)\r\n        .then(response => {\r\n            dispatch(getDataSuccess(response.data));\r\n        })\r\n        .catch(error => {\r\n            dispatch(errorHandlerActions.handleHTTPError(error, props));\r\n        })\r\n    }\r\n}\r\n\r\nconst postDataSuccess = (response) => {\r\n    return {\r\n        type: actionTypes.POST_DATA_SUCCESS,\r\n        response: response\r\n    }\r\n}\r\n\r\nexport const postData = (url, obj, props) => {\r\n    return (dispatch) => {\r\n        axios.post(url, obj)\r\n        .then(response => {\r\n            dispatch(postDataSuccess(response));\r\n        })\r\n        .catch(error => {\r\n            dispatch(errorHandlerActions.handleHTTPError(error, props));\r\n        })\r\n    }\r\n}\r\n\r\nconst putDataSuccess = (response) => {\r\n    return {\r\n        type: actionTypes.PUT_DATA_SUCCESS,\r\n        response: response\r\n    }\r\n}\r\n\r\nexport const putData = (url, obj, props) => {\r\n    return (dispatch) => {\r\n        axios.put(url, obj)\r\n        .then(response => {\r\n            dispatch(putDataSuccess(response));\r\n        })\r\n        .catch(error => {\r\n            dispatch(errorHandlerActions.handleHTTPError(error, props));\r\n        })\r\n    }\r\n}\r\n\r\nconst deleteDataSuccess = (response) => {\r\n    return {\r\n        type: actionTypes.DELETE_DATA_SUCCESS,\r\n        response: response\r\n    }\r\n}\r\n\r\nexport const deleteData = (url, props) => {\r\n    return (dispatch) => {\r\n        axios.delete(url)\r\n        .then(response => {\r\n            dispatch(deleteDataSuccess(response));\r\n        })\r\n        .catch(error => {\r\n            dispatch(errorHandlerActions.handleHTTPError(error, props));\r\n        })\r\n    }\r\n}\r\n\r\nexport const closeSuccessModal = (url, props) =>{\r\n    return {\r\n        type: actionTypes.CLOSE_SUCCESS_MODAL,\r\n        props: props,\r\n        url: url\r\n    }\r\n}","import React from 'react';\r\nimport { Modal, Button } from 'react-bootstrap';\r\nimport '../ModalStyles.css';\r\n\r\nconst SuccessModal = (props) => {\r\n    return (\r\n        <Modal show={props.show} backdrop='static'>\r\n            <Modal.Header>\r\n                {props.modalHeaderText}\r\n            </Modal.Header>\r\n            <Modal.Body>\r\n                <p>{props.modalBodyText}</p>\r\n            </Modal.Body>\r\n            <Modal.Footer>\r\n                <Button bsStyle=\"success\" onClick={props.successClick}>{props.okButtonText}</Button>\r\n            </Modal.Footer>\r\n        </Modal>\r\n    )\r\n}\r\n\r\nexport default SuccessModal;","import React from 'react';\r\nimport { Modal, Button } from 'react-bootstrap';\r\nimport '../ModalStyles.css';\r\n\r\nconst ErrorModal = (props) => {\r\n    return (\r\n            <Modal show={props.show} backdrop='static'>\r\n                <Modal.Header>\r\n                    {props.modalHeaderText}\r\n                </Modal.Header>\r\n                <Modal.Body>\r\n                    <p>{props.modalBodyText}</p>\r\n                </Modal.Body>\r\n                <Modal.Footer>\r\n                    <Button bsStyle=\"danger\" onClick={props.closeModal}>{props.okButtonText}</Button>\r\n                </Modal.Footer>\r\n            </Modal>\r\n    )\r\n}\r\n\r\nexport default ErrorModal;","import React from 'react';\r\nimport { FormGroup, Col, FormControl, ControlLabel } from 'react-bootstrap';\r\nimport DatePicker from 'react-datepicker';\r\nimport 'react-datepicker/dist/react-datepicker.css';\r\nimport './Input.css';\r\n\r\nconst input = (props) => {\r\n    let inputField = null;\r\n    let errorMessage = null;\r\n\r\n    if (props.invalid && props.shouldValidate && props.touched) {\r\n        errorMessage = (<em>{props.errorMessage}</em>);\r\n    }\r\n\r\n    switch (props.elementType) {\r\n        case 'input':\r\n            inputField = (\r\n                <FormGroup controlId={props.id}>\r\n                    <Col componentClass={ControlLabel} sm={2}>\r\n                        {props.label}\r\n                    </Col>\r\n                    <Col sm={6}>\r\n                        <FormControl type={props.type} value={props.value} onChange={props.changed} onBlur={props.blur} />\r\n                    </Col>\r\n                    <Col>\r\n                        <em>{errorMessage}</em>\r\n                    </Col>\r\n                </FormGroup>\r\n            )\r\n            break;\r\n        case 'datePicker':\r\n            inputField = (\r\n                <FormGroup controlId={props.id}>\r\n                    <Col componentClass={ControlLabel} sm={2}>\r\n                        {props.label}\r\n                    </Col>\r\n                    <Col sm={6}>\r\n                        <DatePicker selected={props.value} dateFormat=\"MM/DD/YYYY\" readOnly\r\n                            onChange={props.changed} className='datePickerControl'\r\n                            showYearDropdown dropdownMode=\"select\" />\r\n                    </Col>\r\n                    <Col>\r\n                        <em>{errorMessage}</em>\r\n                    </Col>\r\n                </FormGroup>\r\n            )\r\n            break;\r\n        default: inputField = null;\r\n    }\r\n    \r\n    return (\r\n        <>\r\n            {inputField}\r\n        </>\r\n    )\r\n}\r\n\r\nexport default input;","import moment from 'moment';\r\n\r\nexport const returnInputConfiguration = () => {\r\n    return {\r\n        name: {\r\n            element: 'input', type: 'text', value: '',\r\n            validation: { required: true, maxLength: 60 }, valid: false, touched: false,\r\n            errorMessage: '', label: 'Name:'\r\n        },\r\n        address: {\r\n            element: 'input', type: 'text', value: '',\r\n            validation: { required: true, maxLength: 100 }, valid: false, touched: false,\r\n            errorMessage: '', label: 'Address:'\r\n        },\r\n        dateOfBirth: {\r\n            element: 'datePicker', type: 'text', value: moment(),\r\n            valid: true, touched: false,\r\n            errorMessage: '', label: 'Date of birth:'\r\n        }\r\n    }\r\n}","export const convertStateToArrayOfFormObjects = (formObject) => {\r\n    const formElementsArray = [];\r\n    for (let key in formObject) {\r\n        formElementsArray.push({\r\n            id: key,\r\n            config: formObject[key]\r\n        });\r\n    }\r\n\r\n    return formElementsArray;\r\n}\r\n\r\nconst checkValidity = (value, validation) => {\r\n    let validationObject = {\r\n        isValid: true,\r\n        errorMessage: ''\r\n    };\r\n\r\n    if (validation) {\r\n        if (validation.required) {\r\n            validationObject.isValid = value.trim() !== '';\r\n            validationObject.errorMessage = validationObject.isValid ? '' : 'Field is required';\r\n        }\r\n\r\n        if (validationObject.isValid && validation.maxLength) {\r\n            validationObject.isValid = value.length <= validation.maxLength;\r\n            validationObject.errorMessage = validationObject.isValid ? '' : `Not allowed more than ${validation.maxLength} characters`;\r\n        }\r\n\r\n        return validationObject;\r\n    }\r\n    else {\r\n        return validationObject;\r\n    }\r\n}\r\n\r\nexport const executeValidationAndReturnFormElement = (event, updatedOwnerForm, id) => {\r\n    let formElement = { ...updatedOwnerForm[id] };\r\n    formElement.value = id === 'dateOfBirth' ? event : event.target.value;\r\n    formElement.touched = true;\r\n\r\n    const validationResponse = checkValidity(formElement.value, formElement.validation);\r\n\r\n    formElement.valid = validationResponse.isValid;\r\n    formElement.errorMessage = validationResponse.errorMessage;\r\n\r\n    return formElement;\r\n}\r\n\r\nexport const countInvalidElements = (ownerForm) => {\r\n    let countInvalidElements = 0;\r\n    for (let element in ownerForm) {\r\n        if (!ownerForm[element].valid) {\r\n            countInvalidElements = countInvalidElements + 1;\r\n            break;\r\n        }\r\n    }\r\n    return countInvalidElements;\r\n}","import React, { Component } from 'react';\r\nimport { Form, Well, Button, FormGroup, Col } from 'react-bootstrap';\r\nimport { returnInputConfiguration } from '../../../Utility/InputConfiguration';\r\nimport * as formUtilityActions from '../../../Utility/FormUtility';\r\nimport Input from '../../../UI/Inputs/Input';\r\nimport * as repositoryActions from '../../../store/actions/repositoryActions';\r\nimport * as errorHandlerActions from '../../../store/actions/errorHandlerActions';\r\nimport { connect } from 'react-redux';\r\nimport moment from 'moment';\r\nimport SuccessModal from '../../../components/Modals/SuccessModal/SuccessModal';\r\nimport ErrorModal from '../../../components/Modals/ErrorModal/ErrorModal';\r\n\r\nclass UpdateOwner extends Component {\r\n    state = {\r\n        ownerForm: {},\r\n        isFormValid: true\r\n    }\r\n\r\n    componentWillMount = () => {\r\n        this.setState({ ownerForm: returnInputConfiguration() });\r\n    }\r\n\r\n    componentDidMount = () => {\r\n        const id = this.props.match.params.id;\r\n        const url = '/api/owner/' + id;\r\n        this.props.onGetOwnerById(url, { ...this.props });\r\n    }\r\n\r\n    componentWillReceiveProps = (nextProps) => {\r\n        const updatedOwnerForm = { ...this.state.ownerForm };\r\n        let nameObject = { ...updatedOwnerForm.name };\r\n        let dateObject = { ...updatedOwnerForm.dateOfBirth };\r\n        let addressObject = { ...updatedOwnerForm.address };\r\n\r\n        nameObject.value = nextProps.data.name;\r\n        nameObject.valid = true;\r\n        dateObject.value = moment(nextProps.data.dateOfBirth);\r\n        addressObject.value = nextProps.data.address;\r\n        addressObject.valid = true;\r\n\r\n        updatedOwnerForm['name'] = nameObject;\r\n        updatedOwnerForm['dateOfBirth'] = dateObject;\r\n        updatedOwnerForm['address'] = addressObject;\r\n        this.setState({ ownerForm: updatedOwnerForm });\r\n    }\r\n\r\n    handleChangeEvent = (event, id) => {\r\n        const updatedOwnerForm = { ...this.state.ownerForm };\r\n        updatedOwnerForm[id] = formUtilityActions.executeValidationAndReturnFormElement(event, updatedOwnerForm, id);\r\n\r\n        const counter = formUtilityActions.countInvalidElements(updatedOwnerForm);\r\n\r\n        this.setState({ ownerForm: updatedOwnerForm, isFormValid: counter === 0 })\r\n    }\r\n\r\n    redirectToOwnerList = () => {\r\n        this.props.history.push('/owner-List');\r\n    }\r\n\r\n    updateOwner = (event) => {\r\n        event.preventDefault();\r\n\r\n        const ownerToUpdate = {\r\n            name: this.state.ownerForm.name.value,\r\n            dateOfBirth: this.state.ownerForm.dateOfBirth.value,\r\n            address: this.state.ownerForm.address.value\r\n        }\r\n\r\n        const url = \"/api/owner/\" + this.props.data.id;\r\n\r\n        this.props.onUpdateOwner(url, ownerToUpdate, { ...this.props });\r\n    }\r\n\r\n    render() {\r\n        const formElementsArray = formUtilityActions.convertStateToArrayOfFormObjects({ ...this.state.ownerForm });\r\n\r\n        return (\r\n            <Well>\r\n                <Form horizontal onSubmit={this.updateOwner}>\r\n                    {\r\n                        formElementsArray.map(element => {\r\n                            return <Input key={element.id} elementType={element.config.element}\r\n                                id={element.id} label={element.config.label}\r\n                                type={element.config.type} value={element.config.value}\r\n                                changed={(event) => this.handleChangeEvent(event, element.id)}\r\n                                errorMessage={element.config.errorMessage} invalid={!element.config.valid}\r\n                                shouldValidate={element.config.validation}\r\n                                touched={element.config.touched}\r\n                                blur={(event) => this.handleChangeEvent(event, element.id)} />\r\n                        })\r\n                    }\r\n                    <br />\r\n                    <FormGroup>\r\n                        <Col mdOffset={6} md={1}>\r\n                            <Button type='submit' bsStyle='info' disabled={!this.state.isFormValid}>Update</Button>\r\n                        </Col>\r\n                        <Col md={1}>\r\n                            <Button bsStyle='danger' onClick={this.redirectToOwnerList}>Cancel</Button>\r\n                        </Col>\r\n                    </FormGroup>\r\n                </Form>\r\n                <SuccessModal show={this.props.showSuccessModal} modalHeaderText={'Success message'}\r\n                    modalBodyText={'Action completed successfully'}\r\n                    okButtonText={'OK'}\r\n                    successClick={() => this.props.onCloseSuccessModal('/owner-List', { ...this.props })} />\r\n                <ErrorModal show={this.props.showErrorModal} modalHeaderText={'Error message'}\r\n                    modalBodyText={this.props.errorMessage}\r\n                    okButtonText={'OK'}\r\n                    closeModal={() => this.props.onCloseErrorModal()} />\r\n            </Well>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        data: state.repository.data,\r\n        showSuccessModal: state.repository.showSuccessModal,\r\n        showErrorModal: state.errorHandler.showErrorModal,\r\n        errorMessage: state.errorHandler.errorMessage\r\n    }\r\n}\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        onGetOwnerById: (url, props) => dispatch(repositoryActions.getData(url, props)),\r\n        onUpdateOwner: (url, owner, props) => dispatch(repositoryActions.putData(url, owner, props)),\r\n        onCloseSuccessModal: (url, props) => dispatch(repositoryActions.closeSuccessModal(url, props)),\r\n        onCloseErrorModal: () => dispatch(errorHandlerActions.closeErrorModal())\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(UpdateOwner);"],"sourceRoot":""}